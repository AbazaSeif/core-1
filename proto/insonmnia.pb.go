// Code generated by protoc-gen-go. DO NOT EDIT.
// source: insonmnia.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TaskStatusReply_Status int32

const (
	TaskStatusReply_UNKNOWN  TaskStatusReply_Status = 0
	TaskStatusReply_SPOOLING TaskStatusReply_Status = 1
	TaskStatusReply_SPAWNING TaskStatusReply_Status = 2
	TaskStatusReply_RUNNING  TaskStatusReply_Status = 3
	TaskStatusReply_FINISHED TaskStatusReply_Status = 4
	TaskStatusReply_BROKEN   TaskStatusReply_Status = 5
)

var TaskStatusReply_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "SPOOLING",
	2: "SPAWNING",
	3: "RUNNING",
	4: "FINISHED",
	5: "BROKEN",
}
var TaskStatusReply_Status_value = map[string]int32{
	"UNKNOWN":  0,
	"SPOOLING": 1,
	"SPAWNING": 2,
	"RUNNING":  3,
	"FINISHED": 4,
	"BROKEN":   5,
}

func (x TaskStatusReply_Status) String() string {
	return proto.EnumName(TaskStatusReply_Status_name, int32(x))
}
func (TaskStatusReply_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{6, 0} }

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type PingReply struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *PingReply) Reset()                    { *m = PingReply{} }
func (m *PingReply) String() string            { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()               {}
func (*PingReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *PingReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type InfoReply struct {
	Stats        map[string]*InfoReplyStats `protobuf:"bytes,1,rep,name=Stats,json=stats" json:"Stats,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Capabilities *Capabilities              `protobuf:"bytes,2,opt,name=capabilities" json:"capabilities,omitempty"`
	Name         string                     `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *InfoReply) Reset()                    { *m = InfoReply{} }
func (m *InfoReply) String() string            { return proto.CompactTextString(m) }
func (*InfoReply) ProtoMessage()               {}
func (*InfoReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *InfoReply) GetStats() map[string]*InfoReplyStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *InfoReply) GetCapabilities() *Capabilities {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *InfoReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type InfoReplyStats struct {
	CPU    *InfoReplyStatsCpu    `protobuf:"bytes,1,opt,name=CPU,json=cPU" json:"CPU,omitempty"`
	Memory *InfoReplyStatsMemory `protobuf:"bytes,2,opt,name=Memory,json=memory" json:"Memory,omitempty"`
}

func (m *InfoReplyStats) Reset()                    { *m = InfoReplyStats{} }
func (m *InfoReplyStats) String() string            { return proto.CompactTextString(m) }
func (*InfoReplyStats) ProtoMessage()               {}
func (*InfoReplyStats) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2, 0} }

func (m *InfoReplyStats) GetCPU() *InfoReplyStatsCpu {
	if m != nil {
		return m.CPU
	}
	return nil
}

func (m *InfoReplyStats) GetMemory() *InfoReplyStatsMemory {
	if m != nil {
		return m.Memory
	}
	return nil
}

type InfoReplyStatsCpu struct {
	TotalUsage uint64 `protobuf:"varint,1,opt,name=totalUsage" json:"totalUsage,omitempty"`
}

func (m *InfoReplyStatsCpu) Reset()                    { *m = InfoReplyStatsCpu{} }
func (m *InfoReplyStatsCpu) String() string            { return proto.CompactTextString(m) }
func (*InfoReplyStatsCpu) ProtoMessage()               {}
func (*InfoReplyStatsCpu) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2, 0, 0} }

func (m *InfoReplyStatsCpu) GetTotalUsage() uint64 {
	if m != nil {
		return m.TotalUsage
	}
	return 0
}

type InfoReplyStatsMemory struct {
	MaxUsage uint64 `protobuf:"varint,1,opt,name=maxUsage" json:"maxUsage,omitempty"`
}

func (m *InfoReplyStatsMemory) Reset()                    { *m = InfoReplyStatsMemory{} }
func (m *InfoReplyStatsMemory) String() string            { return proto.CompactTextString(m) }
func (*InfoReplyStatsMemory) ProtoMessage()               {}
func (*InfoReplyStatsMemory) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2, 0, 1} }

func (m *InfoReplyStatsMemory) GetMaxUsage() uint64 {
	if m != nil {
		return m.MaxUsage
	}
	return 0
}

type StopTaskRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *StopTaskRequest) Reset()                    { *m = StopTaskRequest{} }
func (m *StopTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*StopTaskRequest) ProtoMessage()               {}
func (*StopTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *StopTaskRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type StopTaskReply struct {
}

func (m *StopTaskReply) Reset()                    { *m = StopTaskReply{} }
func (m *StopTaskReply) String() string            { return proto.CompactTextString(m) }
func (*StopTaskReply) ProtoMessage()               {}
func (*StopTaskReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

type TaskStatusRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *TaskStatusRequest) Reset()                    { *m = TaskStatusRequest{} }
func (m *TaskStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*TaskStatusRequest) ProtoMessage()               {}
func (*TaskStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *TaskStatusRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TaskStatusReply struct {
	Status TaskStatusReply_Status `protobuf:"varint,1,opt,name=status,enum=sonm.TaskStatusReply_Status" json:"status,omitempty"`
}

func (m *TaskStatusReply) Reset()                    { *m = TaskStatusReply{} }
func (m *TaskStatusReply) String() string            { return proto.CompactTextString(m) }
func (*TaskStatusReply) ProtoMessage()               {}
func (*TaskStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *TaskStatusReply) GetStatus() TaskStatusReply_Status {
	if m != nil {
		return m.Status
	}
	return TaskStatusReply_UNKNOWN
}

type StatusMapReply struct {
	Statuses map[string]*TaskStatusReply `protobuf:"bytes,1,rep,name=statuses" json:"statuses,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *StatusMapReply) Reset()                    { *m = StatusMapReply{} }
func (m *StatusMapReply) String() string            { return proto.CompactTextString(m) }
func (*StatusMapReply) ProtoMessage()               {}
func (*StatusMapReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *StatusMapReply) GetStatuses() map[string]*TaskStatusReply {
	if m != nil {
		return m.Statuses
	}
	return nil
}

type ContainerResources struct {
	Memory   int64 `protobuf:"varint,1,opt,name=memory" json:"memory,omitempty"`
	NanoCPUs int64 `protobuf:"varint,2,opt,name=nanoCPUs" json:"nanoCPUs,omitempty"`
}

func (m *ContainerResources) Reset()                    { *m = ContainerResources{} }
func (m *ContainerResources) String() string            { return proto.CompactTextString(m) }
func (*ContainerResources) ProtoMessage()               {}
func (*ContainerResources) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *ContainerResources) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *ContainerResources) GetNanoCPUs() int64 {
	if m != nil {
		return m.NanoCPUs
	}
	return 0
}

type ContainerRestartPolicy struct {
	Name              string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	MaximumRetryCount uint32 `protobuf:"varint,2,opt,name=maximumRetryCount" json:"maximumRetryCount,omitempty"`
}

func (m *ContainerRestartPolicy) Reset()                    { *m = ContainerRestartPolicy{} }
func (m *ContainerRestartPolicy) String() string            { return proto.CompactTextString(m) }
func (*ContainerRestartPolicy) ProtoMessage()               {}
func (*ContainerRestartPolicy) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *ContainerRestartPolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContainerRestartPolicy) GetMaximumRetryCount() uint32 {
	if m != nil {
		return m.MaximumRetryCount
	}
	return 0
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "sonm.PingRequest")
	proto.RegisterType((*PingReply)(nil), "sonm.PingReply")
	proto.RegisterType((*InfoReply)(nil), "sonm.InfoReply")
	proto.RegisterType((*InfoReplyStats)(nil), "sonm.InfoReply.stats")
	proto.RegisterType((*InfoReplyStatsCpu)(nil), "sonm.InfoReply.stats.cpu")
	proto.RegisterType((*InfoReplyStatsMemory)(nil), "sonm.InfoReply.stats.memory")
	proto.RegisterType((*StopTaskRequest)(nil), "sonm.StopTaskRequest")
	proto.RegisterType((*StopTaskReply)(nil), "sonm.StopTaskReply")
	proto.RegisterType((*TaskStatusRequest)(nil), "sonm.TaskStatusRequest")
	proto.RegisterType((*TaskStatusReply)(nil), "sonm.TaskStatusReply")
	proto.RegisterType((*StatusMapReply)(nil), "sonm.StatusMapReply")
	proto.RegisterType((*ContainerResources)(nil), "sonm.ContainerResources")
	proto.RegisterType((*ContainerRestartPolicy)(nil), "sonm.ContainerRestartPolicy")
	proto.RegisterEnum("sonm.TaskStatusReply_Status", TaskStatusReply_Status_name, TaskStatusReply_Status_value)
}

func init() { proto.RegisterFile("insonmnia.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0x7f, 0x6b, 0xd3, 0x40,
	0x18, 0x36, 0x4d, 0x1b, 0xd7, 0xb7, 0xeb, 0x8f, 0x1d, 0x38, 0x6a, 0x10, 0x99, 0x99, 0x42, 0x61,
	0x12, 0xa4, 0x0e, 0x11, 0xff, 0x10, 0xb4, 0x56, 0x57, 0xe6, 0xd2, 0x70, 0x35, 0x4c, 0xfc, 0xef,
	0x96, 0x9d, 0x23, 0x2c, 0xb9, 0x8b, 0xc9, 0x45, 0x96, 0xef, 0xe1, 0x17, 0x10, 0xfc, 0x0e, 0x7e,
	0x3d, 0xb9, 0xbb, 0xb4, 0x4d, 0xeb, 0x04, 0xff, 0xea, 0x3d, 0x79, 0x9f, 0xf7, 0x79, 0x1f, 0xde,
	0x1f, 0x85, 0x7e, 0xc4, 0x72, 0xce, 0x12, 0x16, 0x11, 0x37, 0xcd, 0xb8, 0xe0, 0xa8, 0x29, 0xa1,
	0x8d, 0x42, 0x92, 0x92, 0x8b, 0x28, 0x8e, 0x44, 0x44, 0x73, 0x1d, 0x71, 0xba, 0xd0, 0xf1, 0x23,
	0x76, 0x85, 0xe9, 0xb7, 0x82, 0xe6, 0xc2, 0x39, 0x84, 0xb6, 0x86, 0x69, 0x5c, 0xa2, 0x7d, 0xb0,
	0x72, 0x41, 0x44, 0x91, 0x0f, 0x8d, 0x03, 0x63, 0xd4, 0xc6, 0x15, 0x72, 0x7e, 0x98, 0xd0, 0x9e,
	0xb1, 0xaf, 0x5c, 0xb3, 0x9e, 0x41, 0x6b, 0x21, 0x88, 0x90, 0x24, 0x73, 0xd4, 0x19, 0xdb, 0xae,
	0xac, 0xe5, 0xae, 0xe2, 0xae, 0x0a, 0x4e, 0x99, 0xc8, 0x4a, 0xdc, 0x92, 0x02, 0x39, 0x7a, 0x01,
	0xbb, 0x75, 0x27, 0xc3, 0xc6, 0x81, 0x31, 0xea, 0x8c, 0x91, 0x4e, 0x9c, 0xd4, 0x22, 0x78, 0x83,
	0x87, 0x10, 0x34, 0x19, 0x49, 0xe8, 0xd0, 0x54, 0x6e, 0xd4, 0xdb, 0xfe, 0x6d, 0x40, 0xa5, 0x7a,
	0x04, 0xe6, 0xc4, 0x0f, 0x94, 0xd5, 0xce, 0xf8, 0xfe, 0xb6, 0x0b, 0xc5, 0x71, 0xc3, 0xb4, 0xc0,
	0x66, 0xe8, 0x07, 0xe8, 0x18, 0xac, 0x33, 0x9a, 0xf0, 0xac, 0xac, 0x8a, 0x3f, 0xb8, 0x9d, 0x9f,
	0x28, 0x0e, 0xb6, 0xf4, 0xaf, 0xfd, 0x04, 0xcc, 0x30, 0x2d, 0xd0, 0x43, 0x00, 0xc1, 0x05, 0x89,
	0x83, 0x9c, 0x5c, 0x51, 0x55, 0xb0, 0x89, 0x6b, 0x5f, 0xec, 0xc7, 0x50, 0x25, 0x20, 0x1b, 0x76,
	0x12, 0x72, 0x53, 0xe7, 0xad, 0xb0, 0x3d, 0x07, 0x58, 0xb7, 0x06, 0x0d, 0xc0, 0xbc, 0xa6, 0x65,
	0xd5, 0x68, 0xf9, 0x44, 0x47, 0xd0, 0xfa, 0x4e, 0xe2, 0x82, 0x56, 0x0e, 0xef, 0xdd, 0xea, 0x10,
	0x6b, 0xce, 0xab, 0xc6, 0x4b, 0xc3, 0x79, 0x04, 0xfd, 0x85, 0xe0, 0xe9, 0x27, 0x92, 0x5f, 0x57,
	0xe3, 0x44, 0x3d, 0x68, 0x44, 0x97, 0x95, 0x68, 0x23, 0xba, 0x74, 0xfa, 0xd0, 0x5d, 0x53, 0xd2,
	0xb8, 0x74, 0x0e, 0x61, 0x4f, 0x82, 0x85, 0x1a, 0xec, 0xbf, 0xb2, 0x7e, 0x1a, 0xd0, 0xaf, 0xb3,
	0xe4, 0xd4, 0x8f, 0x37, 0x76, 0xa3, 0xb7, 0x6c, 0xe0, 0x16, 0xcd, 0xad, 0xde, 0xcb, 0xcd, 0xf9,
	0x0c, 0x96, 0xfe, 0x82, 0x3a, 0x70, 0x37, 0xf0, 0x4e, 0xbd, 0xf9, 0xb9, 0x37, 0xb8, 0x83, 0x76,
	0x61, 0x67, 0xe1, 0xcf, 0xe7, 0x1f, 0x67, 0xde, 0x87, 0x81, 0xa1, 0xd1, 0x9b, 0x73, 0x4f, 0xa2,
	0x86, 0x24, 0xe2, 0xc0, 0x53, 0xc0, 0x94, 0xa1, 0xf7, 0x33, 0x6f, 0xb6, 0x38, 0x99, 0xbe, 0x1b,
	0x34, 0x11, 0x80, 0xf5, 0x16, 0xcf, 0x4f, 0xa7, 0xde, 0xa0, 0xe5, 0xfc, 0x32, 0xa0, 0xa7, 0xa5,
	0xcf, 0x48, 0xaa, 0x2d, 0xbe, 0x86, 0x1d, 0x5d, 0x96, 0x2e, 0x77, 0xd3, 0xd1, 0x26, 0x37, 0x79,
	0x15, 0xa4, 0xd5, 0x8e, 0xae, 0x72, 0x6c, 0x2c, 0x9b, 0x55, 0x0b, 0xfd, 0xf7, 0x8c, 0xb6, 0x9a,
	0x50, 0x9f, 0xd1, 0x09, 0xa0, 0x09, 0x67, 0x82, 0x44, 0x8c, 0x66, 0x98, 0xe6, 0xbc, 0xc8, 0x42,
	0x9a, 0xcb, 0x43, 0xd3, 0x0b, 0xa3, 0xb4, 0x4d, 0x5c, 0x5b, 0x1f, 0x46, 0x18, 0x9f, 0xf8, 0x81,
	0x3e, 0x12, 0x13, 0xaf, 0xb0, 0xf3, 0x05, 0xf6, 0xeb, 0x4a, 0x82, 0x64, 0xc2, 0xe7, 0x71, 0x14,
	0x96, 0xab, 0x33, 0x31, 0xd6, 0x67, 0x82, 0x9e, 0xc2, 0x5e, 0x42, 0x6e, 0xa2, 0xa4, 0x48, 0x30,
	0x15, 0x59, 0x39, 0xe1, 0x05, 0x13, 0x4a, 0xb2, 0x8b, 0xff, 0x0e, 0x5c, 0x58, 0xea, 0xbf, 0xe1,
	0xf9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x83, 0x40, 0x22, 0x3f, 0x48, 0x04, 0x00, 0x00,
}
