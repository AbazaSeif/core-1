// Code generated by protoc-gen-go. DO NOT EDIT.
// source: insonmnia.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TaskStatusReply_Status int32

const (
	TaskStatusReply_UNKNOWN  TaskStatusReply_Status = 0
	TaskStatusReply_SPOOLING TaskStatusReply_Status = 1
	TaskStatusReply_SPAWNING TaskStatusReply_Status = 2
	TaskStatusReply_RUNNING  TaskStatusReply_Status = 3
	TaskStatusReply_FINISHED TaskStatusReply_Status = 4
	TaskStatusReply_BROKEN   TaskStatusReply_Status = 5
)

var TaskStatusReply_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "SPOOLING",
	2: "SPAWNING",
	3: "RUNNING",
	4: "FINISHED",
	5: "BROKEN",
}
var TaskStatusReply_Status_value = map[string]int32{
	"UNKNOWN":  0,
	"SPOOLING": 1,
	"SPAWNING": 2,
	"RUNNING":  3,
	"FINISHED": 4,
	"BROKEN":   5,
}

func (x TaskStatusReply_Status) String() string {
	return proto.EnumName(TaskStatusReply_Status_name, int32(x))
}
func (TaskStatusReply_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{10, 0} }

type TaskLogsRequest_Type int32

const (
	TaskLogsRequest_STDOUT TaskLogsRequest_Type = 0
	TaskLogsRequest_STDERR TaskLogsRequest_Type = 1
	TaskLogsRequest_BOTH   TaskLogsRequest_Type = 2
)

var TaskLogsRequest_Type_name = map[int32]string{
	0: "STDOUT",
	1: "STDERR",
	2: "BOTH",
}
var TaskLogsRequest_Type_value = map[string]int32{
	"STDOUT": 0,
	"STDERR": 1,
	"BOTH":   2,
}

func (x TaskLogsRequest_Type) String() string {
	return proto.EnumName(TaskLogsRequest_Type_name, int32(x))
}
func (TaskLogsRequest_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{13, 0} }

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type PingReply struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *PingReply) Reset()                    { *m = PingReply{} }
func (m *PingReply) String() string            { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()               {}
func (*PingReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *PingReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type CPUUsage struct {
	Total uint64 `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
}

func (m *CPUUsage) Reset()                    { *m = CPUUsage{} }
func (m *CPUUsage) String() string            { return proto.CompactTextString(m) }
func (*CPUUsage) ProtoMessage()               {}
func (*CPUUsage) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *CPUUsage) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type MemoryUsage struct {
	MaxUsage uint64 `protobuf:"varint,1,opt,name=maxUsage" json:"maxUsage,omitempty"`
}

func (m *MemoryUsage) Reset()                    { *m = MemoryUsage{} }
func (m *MemoryUsage) String() string            { return proto.CompactTextString(m) }
func (*MemoryUsage) ProtoMessage()               {}
func (*MemoryUsage) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *MemoryUsage) GetMaxUsage() uint64 {
	if m != nil {
		return m.MaxUsage
	}
	return 0
}

type NetworkUsage struct {
	TxBytes   uint64 `protobuf:"varint,1,opt,name=txBytes" json:"txBytes,omitempty"`
	RxBytes   uint64 `protobuf:"varint,2,opt,name=rxBytes" json:"rxBytes,omitempty"`
	TxPackets uint64 `protobuf:"varint,3,opt,name=txPackets" json:"txPackets,omitempty"`
	RxPackets uint64 `protobuf:"varint,4,opt,name=rxPackets" json:"rxPackets,omitempty"`
	TxErrors  uint64 `protobuf:"varint,5,opt,name=txErrors" json:"txErrors,omitempty"`
	RxErrors  uint64 `protobuf:"varint,6,opt,name=rxErrors" json:"rxErrors,omitempty"`
	TxDropped uint64 `protobuf:"varint,7,opt,name=txDropped" json:"txDropped,omitempty"`
	RxDropped uint64 `protobuf:"varint,8,opt,name=rxDropped" json:"rxDropped,omitempty"`
}

func (m *NetworkUsage) Reset()                    { *m = NetworkUsage{} }
func (m *NetworkUsage) String() string            { return proto.CompactTextString(m) }
func (*NetworkUsage) ProtoMessage()               {}
func (*NetworkUsage) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *NetworkUsage) GetTxBytes() uint64 {
	if m != nil {
		return m.TxBytes
	}
	return 0
}

func (m *NetworkUsage) GetRxBytes() uint64 {
	if m != nil {
		return m.RxBytes
	}
	return 0
}

func (m *NetworkUsage) GetTxPackets() uint64 {
	if m != nil {
		return m.TxPackets
	}
	return 0
}

func (m *NetworkUsage) GetRxPackets() uint64 {
	if m != nil {
		return m.RxPackets
	}
	return 0
}

func (m *NetworkUsage) GetTxErrors() uint64 {
	if m != nil {
		return m.TxErrors
	}
	return 0
}

func (m *NetworkUsage) GetRxErrors() uint64 {
	if m != nil {
		return m.RxErrors
	}
	return 0
}

func (m *NetworkUsage) GetTxDropped() uint64 {
	if m != nil {
		return m.TxDropped
	}
	return 0
}

func (m *NetworkUsage) GetRxDropped() uint64 {
	if m != nil {
		return m.RxDropped
	}
	return 0
}

type ResourceUsage struct {
	Cpu     *CPUUsage                `protobuf:"bytes,1,opt,name=cpu" json:"cpu,omitempty"`
	Memory  *MemoryUsage             `protobuf:"bytes,2,opt,name=memory" json:"memory,omitempty"`
	Network map[string]*NetworkUsage `protobuf:"bytes,3,rep,name=network" json:"network,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ResourceUsage) Reset()                    { *m = ResourceUsage{} }
func (m *ResourceUsage) String() string            { return proto.CompactTextString(m) }
func (*ResourceUsage) ProtoMessage()               {}
func (*ResourceUsage) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *ResourceUsage) GetCpu() *CPUUsage {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *ResourceUsage) GetMemory() *MemoryUsage {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *ResourceUsage) GetNetwork() map[string]*NetworkUsage {
	if m != nil {
		return m.Network
	}
	return nil
}

type InfoReply struct {
	Usage        map[string]*ResourceUsage `protobuf:"bytes,1,rep,name=usage" json:"usage,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name         string                    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Capabilities *Capabilities             `protobuf:"bytes,3,opt,name=capabilities" json:"capabilities,omitempty"`
}

func (m *InfoReply) Reset()                    { *m = InfoReply{} }
func (m *InfoReply) String() string            { return proto.CompactTextString(m) }
func (*InfoReply) ProtoMessage()               {}
func (*InfoReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *InfoReply) GetUsage() map[string]*ResourceUsage {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *InfoReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InfoReply) GetCapabilities() *Capabilities {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

type StopTaskRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *StopTaskRequest) Reset()                    { *m = StopTaskRequest{} }
func (m *StopTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*StopTaskRequest) ProtoMessage()               {}
func (*StopTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *StopTaskRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type StopTaskReply struct {
}

func (m *StopTaskReply) Reset()                    { *m = StopTaskReply{} }
func (m *StopTaskReply) String() string            { return proto.CompactTextString(m) }
func (*StopTaskReply) ProtoMessage()               {}
func (*StopTaskReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

type TaskStatusRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *TaskStatusRequest) Reset()                    { *m = TaskStatusRequest{} }
func (m *TaskStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*TaskStatusRequest) ProtoMessage()               {}
func (*TaskStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *TaskStatusRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TaskStatusReply struct {
	Status    TaskStatusReply_Status `protobuf:"varint,1,opt,name=status,enum=sonm.TaskStatusReply_Status" json:"status,omitempty"`
	ImageName string                 `protobuf:"bytes,2,opt,name=imageName" json:"imageName,omitempty"`
	Ports     string                 `protobuf:"bytes,3,opt,name=ports" json:"ports,omitempty"`
	Uptime    uint64                 `protobuf:"varint,4,opt,name=uptime" json:"uptime,omitempty"`
	Usage     *ResourceUsage         `protobuf:"bytes,5,opt,name=usage" json:"usage,omitempty"`
	MinerID   string                 `protobuf:"bytes,6,opt,name=minerID" json:"minerID,omitempty"`
}

func (m *TaskStatusReply) Reset()                    { *m = TaskStatusReply{} }
func (m *TaskStatusReply) String() string            { return proto.CompactTextString(m) }
func (*TaskStatusReply) ProtoMessage()               {}
func (*TaskStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{10} }

func (m *TaskStatusReply) GetStatus() TaskStatusReply_Status {
	if m != nil {
		return m.Status
	}
	return TaskStatusReply_UNKNOWN
}

func (m *TaskStatusReply) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *TaskStatusReply) GetPorts() string {
	if m != nil {
		return m.Ports
	}
	return ""
}

func (m *TaskStatusReply) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *TaskStatusReply) GetUsage() *ResourceUsage {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *TaskStatusReply) GetMinerID() string {
	if m != nil {
		return m.MinerID
	}
	return ""
}

type StatusMapReply struct {
	Statuses map[string]*TaskStatusReply `protobuf:"bytes,1,rep,name=statuses" json:"statuses,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *StatusMapReply) Reset()                    { *m = StatusMapReply{} }
func (m *StatusMapReply) String() string            { return proto.CompactTextString(m) }
func (*StatusMapReply) ProtoMessage()               {}
func (*StatusMapReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{11} }

func (m *StatusMapReply) GetStatuses() map[string]*TaskStatusReply {
	if m != nil {
		return m.Statuses
	}
	return nil
}

type ContainerRestartPolicy struct {
	Name              string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	MaximumRetryCount uint32 `protobuf:"varint,2,opt,name=maximumRetryCount" json:"maximumRetryCount,omitempty"`
}

func (m *ContainerRestartPolicy) Reset()                    { *m = ContainerRestartPolicy{} }
func (m *ContainerRestartPolicy) String() string            { return proto.CompactTextString(m) }
func (*ContainerRestartPolicy) ProtoMessage()               {}
func (*ContainerRestartPolicy) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{12} }

func (m *ContainerRestartPolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContainerRestartPolicy) GetMaximumRetryCount() uint32 {
	if m != nil {
		return m.MaximumRetryCount
	}
	return 0
}

type TaskLogsRequest struct {
	Type          TaskLogsRequest_Type `protobuf:"varint,1,opt,name=type,enum=sonm.TaskLogsRequest_Type" json:"type,omitempty"`
	Id            string               `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Since         string               `protobuf:"bytes,3,opt,name=since" json:"since,omitempty"`
	AddTimestamps bool                 `protobuf:"varint,4,opt,name=addTimestamps" json:"addTimestamps,omitempty"`
	Follow        bool                 `protobuf:"varint,5,opt,name=Follow" json:"Follow,omitempty"`
	Tail          string               `protobuf:"bytes,6,opt,name=Tail" json:"Tail,omitempty"`
	Details       bool                 `protobuf:"varint,7,opt,name=Details" json:"Details,omitempty"`
}

func (m *TaskLogsRequest) Reset()                    { *m = TaskLogsRequest{} }
func (m *TaskLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*TaskLogsRequest) ProtoMessage()               {}
func (*TaskLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{13} }

func (m *TaskLogsRequest) GetType() TaskLogsRequest_Type {
	if m != nil {
		return m.Type
	}
	return TaskLogsRequest_STDOUT
}

func (m *TaskLogsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TaskLogsRequest) GetSince() string {
	if m != nil {
		return m.Since
	}
	return ""
}

func (m *TaskLogsRequest) GetAddTimestamps() bool {
	if m != nil {
		return m.AddTimestamps
	}
	return false
}

func (m *TaskLogsRequest) GetFollow() bool {
	if m != nil {
		return m.Follow
	}
	return false
}

func (m *TaskLogsRequest) GetTail() string {
	if m != nil {
		return m.Tail
	}
	return ""
}

func (m *TaskLogsRequest) GetDetails() bool {
	if m != nil {
		return m.Details
	}
	return false
}

type TaskLogsChunk struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TaskLogsChunk) Reset()                    { *m = TaskLogsChunk{} }
func (m *TaskLogsChunk) String() string            { return proto.CompactTextString(m) }
func (*TaskLogsChunk) ProtoMessage()               {}
func (*TaskLogsChunk) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{14} }

func (m *TaskLogsChunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// todo(sshaman1101): remove this and use Empty instead
type EmptyReply struct {
}

func (m *EmptyReply) Reset()                    { *m = EmptyReply{} }
func (m *EmptyReply) String() string            { return proto.CompactTextString(m) }
func (*EmptyReply) ProtoMessage()               {}
func (*EmptyReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{15} }

type DiscoverHubRequest struct {
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty"`
}

func (m *DiscoverHubRequest) Reset()                    { *m = DiscoverHubRequest{} }
func (m *DiscoverHubRequest) String() string            { return proto.CompactTextString(m) }
func (*DiscoverHubRequest) ProtoMessage()               {}
func (*DiscoverHubRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{16} }

func (m *DiscoverHubRequest) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

type TaskResourceRequirements struct {
	// Number of CPU cores.
	CPUCores uint64 `protobuf:"varint,1,opt,name=CPUCores" json:"CPUCores,omitempty"`
	// Memory in bytes required.
	MaxMemory int64 `protobuf:"varint,2,opt,name=maxMemory" json:"maxMemory,omitempty"`
	// Describes whether a task requires GPU supoort.
	GPUSupport bool  `protobuf:"varint,3,opt,name=GPUSupport" json:"GPUSupport,omitempty"`
	NanoCPUs   int64 `protobuf:"varint,4,opt,name=nanoCPUs" json:"nanoCPUs,omitempty"`
}

func (m *TaskResourceRequirements) Reset()                    { *m = TaskResourceRequirements{} }
func (m *TaskResourceRequirements) String() string            { return proto.CompactTextString(m) }
func (*TaskResourceRequirements) ProtoMessage()               {}
func (*TaskResourceRequirements) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{17} }

func (m *TaskResourceRequirements) GetCPUCores() uint64 {
	if m != nil {
		return m.CPUCores
	}
	return 0
}

func (m *TaskResourceRequirements) GetMaxMemory() int64 {
	if m != nil {
		return m.MaxMemory
	}
	return 0
}

func (m *TaskResourceRequirements) GetGPUSupport() bool {
	if m != nil {
		return m.GPUSupport
	}
	return false
}

func (m *TaskResourceRequirements) GetNanoCPUs() int64 {
	if m != nil {
		return m.NanoCPUs
	}
	return 0
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{18} }

type Timestamp struct {
	// Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.
	// Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
	Seconds int64 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	// Non-negative fractions of a second at nanosecond resolution. Negative
	// second values with fractions must still have non-negative nanos values
	// that count forward in time. Must be from 0 to 999'999'999
	// inclusive.
	Nanos int32 `protobuf:"varint,2,opt,name=nanos" json:"nanos,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{19} }

func (m *Timestamp) GetSeconds() int64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *Timestamp) GetNanos() int32 {
	if m != nil {
		return m.Nanos
	}
	return 0
}

type ID struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ID) Reset()                    { *m = ID{} }
func (m *ID) String() string            { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()               {}
func (*ID) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{20} }

func (m *ID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "sonm.PingRequest")
	proto.RegisterType((*PingReply)(nil), "sonm.PingReply")
	proto.RegisterType((*CPUUsage)(nil), "sonm.CPUUsage")
	proto.RegisterType((*MemoryUsage)(nil), "sonm.MemoryUsage")
	proto.RegisterType((*NetworkUsage)(nil), "sonm.NetworkUsage")
	proto.RegisterType((*ResourceUsage)(nil), "sonm.ResourceUsage")
	proto.RegisterType((*InfoReply)(nil), "sonm.InfoReply")
	proto.RegisterType((*StopTaskRequest)(nil), "sonm.StopTaskRequest")
	proto.RegisterType((*StopTaskReply)(nil), "sonm.StopTaskReply")
	proto.RegisterType((*TaskStatusRequest)(nil), "sonm.TaskStatusRequest")
	proto.RegisterType((*TaskStatusReply)(nil), "sonm.TaskStatusReply")
	proto.RegisterType((*StatusMapReply)(nil), "sonm.StatusMapReply")
	proto.RegisterType((*ContainerRestartPolicy)(nil), "sonm.ContainerRestartPolicy")
	proto.RegisterType((*TaskLogsRequest)(nil), "sonm.TaskLogsRequest")
	proto.RegisterType((*TaskLogsChunk)(nil), "sonm.TaskLogsChunk")
	proto.RegisterType((*EmptyReply)(nil), "sonm.EmptyReply")
	proto.RegisterType((*DiscoverHubRequest)(nil), "sonm.DiscoverHubRequest")
	proto.RegisterType((*TaskResourceRequirements)(nil), "sonm.TaskResourceRequirements")
	proto.RegisterType((*Empty)(nil), "sonm.Empty")
	proto.RegisterType((*Timestamp)(nil), "sonm.Timestamp")
	proto.RegisterType((*ID)(nil), "sonm.ID")
	proto.RegisterEnum("sonm.TaskStatusReply_Status", TaskStatusReply_Status_name, TaskStatusReply_Status_value)
	proto.RegisterEnum("sonm.TaskLogsRequest_Type", TaskLogsRequest_Type_name, TaskLogsRequest_Type_value)
}

func init() { proto.RegisterFile("insonmnia.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 1001 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0xae, 0xf3, 0xb7, 0xce, 0xc9, 0x66, 0x37, 0x1d, 0x4a, 0x15, 0x45, 0x15, 0x5a, 0xbc, 0x5c,
	0xec, 0x0a, 0x14, 0x55, 0x0b, 0x42, 0xa8, 0x48, 0x48, 0x6c, 0x92, 0x76, 0xa3, 0x76, 0x9d, 0x68,
	0x92, 0xa8, 0x88, 0xbb, 0xd9, 0x64, 0x58, 0x46, 0xb1, 0x3d, 0xc6, 0x1e, 0xb7, 0xf1, 0x5b, 0xf0,
	0x10, 0x3c, 0x01, 0x4f, 0xc3, 0x23, 0x70, 0xcd, 0x3d, 0x12, 0x9a, 0x39, 0x63, 0xc7, 0x29, 0x0b,
	0x77, 0xf3, 0xcd, 0xf7, 0x8d, 0xe7, 0xfc, 0x7c, 0x67, 0x12, 0x38, 0x15, 0x51, 0x2a, 0xa3, 0x30,
	0x12, 0x6c, 0x18, 0x27, 0x52, 0x49, 0xd2, 0xd0, 0x70, 0x40, 0xd6, 0x2c, 0x66, 0x77, 0x22, 0x10,
	0x4a, 0xf0, 0x14, 0x19, 0xaf, 0x0b, 0x9d, 0xb9, 0x88, 0xee, 0x29, 0xff, 0x25, 0xe3, 0xa9, 0xf2,
	0xce, 0xa1, 0x8d, 0x30, 0x0e, 0x72, 0xf2, 0x14, 0x5a, 0xa9, 0x62, 0x2a, 0x4b, 0xfb, 0xce, 0x99,
	0x73, 0xd1, 0xa6, 0x16, 0x79, 0x67, 0xe0, 0x8e, 0xe6, 0xab, 0x55, 0xca, 0xee, 0x39, 0x79, 0x02,
	0x4d, 0x25, 0x15, 0x0b, 0x8c, 0xa4, 0x41, 0x11, 0x78, 0x97, 0xd0, 0xb9, 0xe5, 0xa1, 0x4c, 0x72,
	0x14, 0x0d, 0xc0, 0x0d, 0xd9, 0xce, 0xac, 0xad, 0xae, 0xc4, 0xde, 0x5f, 0x0e, 0x1c, 0xfb, 0x5c,
	0xbd, 0x97, 0xc9, 0x16, 0xc5, 0x7d, 0x38, 0x52, 0xbb, 0xeb, 0x5c, 0xf1, 0xd4, 0x6a, 0x0b, 0xa8,
	0x99, 0xc4, 0x32, 0x35, 0x64, 0x2c, 0x24, 0xcf, 0xa0, 0xad, 0x76, 0x73, 0xb6, 0xde, 0x72, 0x95,
	0xf6, 0xeb, 0x86, 0xdb, 0x6f, 0x68, 0x36, 0x29, 0xd9, 0x06, 0xb2, 0xe5, 0x86, 0x0e, 0x4e, 0xed,
	0x26, 0x49, 0x22, 0x93, 0xb4, 0xdf, 0xc4, 0xe0, 0x0a, 0xac, 0xb9, 0xa4, 0xe0, 0x5a, 0xc8, 0x15,
	0x18, 0xef, 0x1c, 0x27, 0x32, 0x8e, 0xf9, 0xa6, 0x7f, 0x54, 0xdc, 0x69, 0x37, 0xf0, 0xce, 0x82,
	0x75, 0x8b, 0x3b, 0xed, 0x86, 0xf7, 0xa7, 0x03, 0x5d, 0xca, 0x53, 0x99, 0x25, 0x6b, 0x8e, 0x59,
	0x9f, 0x41, 0x7d, 0x1d, 0x67, 0x26, 0xe3, 0xce, 0xd5, 0xc9, 0x50, 0xf7, 0x6b, 0x58, 0x14, 0x99,
	0x6a, 0x8a, 0x5c, 0x42, 0x2b, 0x34, 0x35, 0x35, 0xc9, 0x77, 0xae, 0x1e, 0xa3, 0xa8, 0x52, 0x67,
	0x6a, 0x05, 0xe4, 0x05, 0x1c, 0x45, 0x58, 0xd2, 0x7e, 0xfd, 0xac, 0x7e, 0xd1, 0xb9, 0x3a, 0x43,
	0xed, 0xc1, 0x95, 0x43, 0x5b, 0xf5, 0x49, 0xa4, 0x92, 0x9c, 0x16, 0x07, 0x06, 0x7e, 0xd9, 0x0e,
	0x43, 0x90, 0x1e, 0xd4, 0xb7, 0x3c, 0xb7, 0x0e, 0xd0, 0x4b, 0x72, 0x01, 0xcd, 0x77, 0x2c, 0xc8,
	0xb8, 0x8d, 0x83, 0xe0, 0xb7, 0xab, 0x3d, 0xa4, 0x28, 0x78, 0x51, 0xfb, 0xc6, 0xf1, 0xfe, 0x70,
	0xa0, 0x3d, 0x8d, 0x7e, 0x92, 0x68, 0xa9, 0xe7, 0xd0, 0xcc, 0xac, 0x0d, 0x74, 0x5c, 0x03, 0x3c,
	0x5b, 0xf2, 0x43, 0x73, 0x1c, 0x23, 0x42, 0x21, 0x21, 0xd0, 0x88, 0x58, 0x88, 0x97, 0xb5, 0xa9,
	0x59, 0x93, 0xaf, 0xe1, 0xb8, 0x6a, 0x65, 0xd3, 0xf1, 0x32, 0x90, 0x51, 0x85, 0xa1, 0x07, 0xba,
	0xc1, 0x2d, 0xc0, 0xfe, 0x82, 0x07, 0x32, 0xbb, 0x3c, 0xcc, 0xec, 0xa3, 0x07, 0xaa, 0x56, 0x4d,
	0xed, 0x53, 0x38, 0x5d, 0x28, 0x19, 0x2f, 0x59, 0xba, 0xb5, 0xf3, 0x43, 0x4e, 0xa0, 0x26, 0x36,
	0xf6, 0x93, 0x35, 0xb1, 0xf1, 0x4e, 0xa1, 0xbb, 0x97, 0xc4, 0x41, 0xee, 0x9d, 0xc3, 0x63, 0x0d,
	0x16, 0x66, 0x92, 0xfe, 0xeb, 0xd4, 0xef, 0x35, 0x38, 0xad, 0xaa, 0x74, 0xe5, 0xbe, 0x3a, 0x18,
	0xc6, 0x93, 0xab, 0x67, 0x18, 0xdc, 0x07, 0xb2, 0xa1, 0x5d, 0x5b, 0xad, 0xb6, 0xa1, 0x08, 0xd9,
	0x3d, 0xf7, 0xf7, 0x25, 0xdc, 0x6f, 0xe8, 0xe1, 0x8d, 0x65, 0x62, 0x47, 0xa6, 0x4d, 0x11, 0xe8,
	0xb1, 0xcf, 0x62, 0x25, 0x42, 0x6e, 0x67, 0xc5, 0x22, 0x5d, 0x1d, 0xec, 0x5d, 0xf3, 0x7f, 0xaa,
	0x93, 0x15, 0x33, 0x1c, 0x8a, 0x88, 0x27, 0xd3, 0xb1, 0x19, 0x9b, 0x36, 0x2d, 0xa0, 0xf7, 0x03,
	0xb4, 0x30, 0x44, 0xd2, 0x81, 0xa3, 0x95, 0xff, 0xda, 0x9f, 0xbd, 0xf5, 0x7b, 0x8f, 0xc8, 0x31,
	0xb8, 0x8b, 0xf9, 0x6c, 0xf6, 0x66, 0xea, 0xbf, 0xea, 0x39, 0x88, 0xbe, 0x7f, 0xeb, 0x6b, 0x54,
	0xd3, 0x42, 0xba, 0xf2, 0x0d, 0xa8, 0x6b, 0xea, 0xe5, 0xd4, 0x9f, 0x2e, 0x6e, 0x26, 0xe3, 0x5e,
	0x83, 0x00, 0xb4, 0xae, 0xe9, 0xec, 0xf5, 0xc4, 0xef, 0x35, 0xbd, 0xdf, 0x1c, 0x38, 0xc1, 0x4f,
	0xdf, 0xb2, 0x18, 0x6b, 0xf6, 0x1d, 0xb8, 0x58, 0x07, 0xf3, 0x96, 0x68, 0xc3, 0x79, 0x18, 0xf4,
	0xa1, 0xce, 0x42, 0x9e, 0xa2, 0xf1, 0xca, 0x33, 0x03, 0xaa, 0xbb, 0x57, 0xa1, 0x1e, 0xb0, 0xcc,
	0xe7, 0x87, 0x96, 0xf9, 0xf8, 0xc1, 0xae, 0x54, 0x4d, 0xf3, 0x23, 0x3c, 0x1d, 0xc9, 0x48, 0x31,
	0x5d, 0x0f, 0xca, 0x53, 0xc5, 0x12, 0x35, 0x97, 0x81, 0x58, 0xe7, 0xa5, 0xd3, 0x9d, 0x8a, 0xd3,
	0xbf, 0x80, 0xc7, 0x21, 0xdb, 0x89, 0x30, 0x0b, 0x29, 0x57, 0x49, 0x3e, 0x92, 0x59, 0xa4, 0xcc,
	0x55, 0x5d, 0xfa, 0x6f, 0xc2, 0xfb, 0xdb, 0x41, 0xdf, 0xbc, 0x91, 0xf7, 0xa5, 0xb7, 0x86, 0xd0,
	0x50, 0x79, 0xcc, 0xad, 0x6b, 0x06, 0xfb, 0xf8, 0x2a, 0xa2, 0xe1, 0x32, 0x8f, 0x39, 0x35, 0x3a,
	0xeb, 0xc5, 0x5a, 0xe1, 0x45, 0xed, 0x91, 0x54, 0x44, 0x6b, 0x5e, 0x78, 0xc4, 0x00, 0xf2, 0x19,
	0x74, 0xd9, 0x66, 0xb3, 0x14, 0xa1, 0xce, 0x20, 0x8c, 0xf1, 0x59, 0x75, 0xe9, 0xe1, 0xa6, 0x76,
	0xd2, 0x4b, 0x19, 0x04, 0xf2, 0xbd, 0xb1, 0x8c, 0x4b, 0x2d, 0xd2, 0x99, 0x2e, 0x99, 0x08, 0xac,
	0x37, 0xcc, 0x5a, 0x5b, 0x66, 0xcc, 0x15, 0x13, 0x41, 0x6a, 0x1e, 0x53, 0x97, 0x16, 0xd0, 0xbb,
	0x80, 0x86, 0x8e, 0x4f, 0x37, 0x7b, 0xb1, 0x1c, 0xcf, 0x56, 0xcb, 0xde, 0x23, 0xbb, 0x9e, 0x50,
	0xda, 0x73, 0x88, 0x0b, 0x8d, 0xeb, 0xd9, 0xf2, 0xa6, 0x57, 0xf3, 0xce, 0xa1, 0x5b, 0x64, 0x36,
	0xfa, 0x39, 0x8b, 0xb6, 0xfa, 0xa2, 0x0d, 0x53, 0xcc, 0x24, 0x7f, 0x4c, 0xcd, 0xda, 0x3b, 0x06,
	0x98, 0x84, 0xb1, 0xca, 0x71, 0x1e, 0x9f, 0x03, 0x19, 0x8b, 0x74, 0x2d, 0xdf, 0xf1, 0xe4, 0x26,
	0xbb, 0x2b, 0x8a, 0x36, 0x00, 0x97, 0x47, 0x9b, 0x58, 0x8a, 0x48, 0xd9, 0x76, 0x94, 0xd8, 0xfb,
	0xd5, 0x81, 0x3e, 0xce, 0x33, 0x1a, 0x5f, 0x9f, 0x11, 0x09, 0x0f, 0x79, 0x84, 0x3f, 0x26, 0xa3,
	0xf9, 0x6a, 0x24, 0x93, 0xf2, 0xd7, 0xab, 0xc4, 0x7a, 0x16, 0x43, 0xb6, 0xbb, 0xdd, 0xbf, 0xe1,
	0x75, 0xba, 0xdf, 0x20, 0x9f, 0x00, 0xbc, 0x9a, 0xaf, 0x16, 0x59, 0xac, 0x87, 0xd0, 0x14, 0xdb,
	0xa5, 0x95, 0x1d, 0xfd, 0xe5, 0x88, 0x45, 0x72, 0x34, 0x5f, 0x61, 0xb1, 0xeb, 0xb4, 0xc4, 0xde,
	0x11, 0x34, 0x4d, 0x4a, 0xde, 0xb7, 0xd0, 0x2e, 0xcb, 0xaf, 0x2b, 0x9a, 0xf2, 0xb5, 0x8c, 0x36,
	0x18, 0x4a, 0x9d, 0x16, 0x50, 0xf7, 0x54, 0x9f, 0xc5, 0x9f, 0xd1, 0x26, 0x45, 0xe0, 0x3d, 0x81,
	0xda, 0x74, 0xfc, 0xe1, 0x5b, 0x74, 0xd7, 0x32, 0xff, 0x13, 0xbe, 0xfc, 0x27, 0x00, 0x00, 0xff,
	0xff, 0x35, 0x93, 0x30, 0xd9, 0x54, 0x08, 0x00, 0x00,
}
