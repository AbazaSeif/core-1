// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node.proto

package sonm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TaskManagement service

type TaskManagementClient interface {
	// List produces a list of all tasks running on different SONM nodes
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Start starts a task on given resource
	Start(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Status produces a task status by their ID
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Logs retrieves a task log (stdin/stderr) from given task
	Logs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Stop stops a task by their IDd
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type taskManagementClient struct {
	cc *grpc.ClientConn
}

func NewTaskManagementClient(cc *grpc.ClientConn) TaskManagementClient {
	return &taskManagementClient{cc}
}

func (c *taskManagementClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.TaskManagement/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementClient) Start(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.TaskManagement/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.TaskManagement/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementClient) Logs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.TaskManagement/Logs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.TaskManagement/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskManagement service

type TaskManagementServer interface {
	// List produces a list of all tasks running on different SONM nodes
	List(context.Context, *Empty) (*Empty, error)
	// Start starts a task on given resource
	Start(context.Context, *Empty) (*Empty, error)
	// Status produces a task status by their ID
	Status(context.Context, *Empty) (*Empty, error)
	// Logs retrieves a task log (stdin/stderr) from given task
	Logs(context.Context, *Empty) (*Empty, error)
	// Stop stops a task by their IDd
	Stop(context.Context, *Empty) (*Empty, error)
}

func RegisterTaskManagementServer(s *grpc.Server, srv TaskManagementServer) {
	s.RegisterService(&_TaskManagement_serviceDesc, srv)
}

func _TaskManagement_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.TaskManagement/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagement_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.TaskManagement/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServer).Start(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagement_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.TaskManagement/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagement_Logs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServer).Logs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.TaskManagement/Logs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServer).Logs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagement_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.TaskManagement/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.TaskManagement",
	HandlerType: (*TaskManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _TaskManagement_List_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _TaskManagement_Start_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _TaskManagement_Status_Handler,
		},
		{
			MethodName: "Logs",
			Handler:    _TaskManagement_Logs_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _TaskManagement_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

// Client API for DealManagement service

type DealManagementClient interface {
	// List produces a list of all deals made by client with given ID
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Status produces a detailed info about deal with given ID
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Finish finishes a deal with given ID
	Finish(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type dealManagementClient struct {
	cc *grpc.ClientConn
}

func NewDealManagementClient(cc *grpc.ClientConn) DealManagementClient {
	return &dealManagementClient{cc}
}

func (c *dealManagementClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.DealManagement/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealManagementClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.DealManagement/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealManagementClient) Finish(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.DealManagement/Finish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DealManagement service

type DealManagementServer interface {
	// List produces a list of all deals made by client with given ID
	List(context.Context, *Empty) (*Empty, error)
	// Status produces a detailed info about deal with given ID
	Status(context.Context, *Empty) (*Empty, error)
	// Finish finishes a deal with given ID
	Finish(context.Context, *Empty) (*Empty, error)
}

func RegisterDealManagementServer(s *grpc.Server, srv DealManagementServer) {
	s.RegisterService(&_DealManagement_serviceDesc, srv)
}

func _DealManagement_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealManagementServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DealManagement/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealManagementServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealManagement_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealManagementServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DealManagement/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealManagementServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealManagement_Finish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealManagementServer).Finish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.DealManagement/Finish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealManagementServer).Finish(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _DealManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.DealManagement",
	HandlerType: (*DealManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _DealManagement_List_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _DealManagement_Status_Handler,
		},
		{
			MethodName: "Finish",
			Handler:    _DealManagement_Finish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

// Client API for HubManagement service

type HubManagementClient interface {
	// Status produse a detailed info about Hub
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// WorkersList prouces a list of connected Workers
	WorkersList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// WorkersStatus produces a detailed info about a Worker by their ID
	WorkersStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// WorkersUpdateProperties updates resource properties on Worker
	// with given ID
	WorkersUpdateProperties(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// CreateAskPlan allows to create rules
	// for creating Ask orders on Marketplace
	CreateAskPlan(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// RemoveAskPlan allows to remove rules
	// for creating Ask orders on Marketplace
	RemoveAskPlan(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// List produces a list of all running tasks on the Hub
	TaskList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Status produces a detailed info about task on the Hub
	StatusList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type hubManagementClient struct {
	cc *grpc.ClientConn
}

func NewHubManagementClient(cc *grpc.ClientConn) HubManagementClient {
	return &hubManagementClient{cc}
}

func (c *hubManagementClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) WorkersList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/WorkersList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) WorkersStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/WorkersStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) WorkersUpdateProperties(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/WorkersUpdateProperties", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) CreateAskPlan(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/CreateAskPlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) RemoveAskPlan(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/RemoveAskPlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) TaskList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/TaskList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubManagementClient) StatusList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sonm.HubManagement/StatusList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HubManagement service

type HubManagementServer interface {
	// Status produse a detailed info about Hub
	Status(context.Context, *Empty) (*Empty, error)
	// WorkersList prouces a list of connected Workers
	WorkersList(context.Context, *Empty) (*Empty, error)
	// WorkersStatus produces a detailed info about a Worker by their ID
	WorkersStatus(context.Context, *Empty) (*Empty, error)
	// WorkersUpdateProperties updates resource properties on Worker
	// with given ID
	WorkersUpdateProperties(context.Context, *Empty) (*Empty, error)
	// CreateAskPlan allows to create rules
	// for creating Ask orders on Marketplace
	CreateAskPlan(context.Context, *Empty) (*Empty, error)
	// RemoveAskPlan allows to remove rules
	// for creating Ask orders on Marketplace
	RemoveAskPlan(context.Context, *Empty) (*Empty, error)
	// List produces a list of all running tasks on the Hub
	TaskList(context.Context, *Empty) (*Empty, error)
	// Status produces a detailed info about task on the Hub
	StatusList(context.Context, *Empty) (*Empty, error)
}

func RegisterHubManagementServer(s *grpc.Server, srv HubManagementServer) {
	s.RegisterService(&_HubManagement_serviceDesc, srv)
}

func _HubManagement_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_WorkersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).WorkersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/WorkersList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).WorkersList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_WorkersStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).WorkersStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/WorkersStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).WorkersStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_WorkersUpdateProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).WorkersUpdateProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/WorkersUpdateProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).WorkersUpdateProperties(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_CreateAskPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).CreateAskPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/CreateAskPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).CreateAskPlan(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_RemoveAskPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).RemoveAskPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/RemoveAskPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).RemoveAskPlan(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_TaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).TaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/TaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).TaskList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubManagement_StatusList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubManagementServer).StatusList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sonm.HubManagement/StatusList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubManagementServer).StatusList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _HubManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sonm.HubManagement",
	HandlerType: (*HubManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _HubManagement_Status_Handler,
		},
		{
			MethodName: "WorkersList",
			Handler:    _HubManagement_WorkersList_Handler,
		},
		{
			MethodName: "WorkersStatus",
			Handler:    _HubManagement_WorkersStatus_Handler,
		},
		{
			MethodName: "WorkersUpdateProperties",
			Handler:    _HubManagement_WorkersUpdateProperties_Handler,
		},
		{
			MethodName: "CreateAskPlan",
			Handler:    _HubManagement_CreateAskPlan_Handler,
		},
		{
			MethodName: "RemoveAskPlan",
			Handler:    _HubManagement_RemoveAskPlan_Handler,
		},
		{
			MethodName: "TaskList",
			Handler:    _HubManagement_TaskList_Handler,
		},
		{
			MethodName: "StatusList",
			Handler:    _HubManagement_StatusList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

func init() { proto.RegisterFile("node.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0xd2, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0x06, 0x70, 0x2b, 0x35, 0xc8, 0x94, 0x56, 0xc8, 0x45, 0xe8, 0xb1, 0x16, 0x51, 0x84, 0x1c,
	0x2a, 0x3e, 0x80, 0xf8, 0x07, 0x0f, 0x0a, 0xc5, 0x28, 0x9e, 0xa7, 0x74, 0xa8, 0x4b, 0x9a, 0x99,
	0x65, 0x67, 0x2a, 0x78, 0xf3, 0xed, 0x7c, 0x1d, 0x1f, 0x41, 0x62, 0x7b, 0xc8, 0x29, 0xbb, 0x9e,
	0x42, 0x96, 0x1f, 0x33, 0xdf, 0x07, 0x03, 0xc0, 0xb2, 0xa4, 0xc2, 0x07, 0x31, 0xc9, 0xfb, 0x2a,
	0x5c, 0x8f, 0x8f, 0x1c, 0x37, 0x5f, 0x76, 0xb8, 0x7d, 0x9e, 0x7d, 0xf7, 0x60, 0xf4, 0x82, 0x5a,
	0x3d, 0x21, 0xe3, 0x8a, 0x6a, 0x62, 0xcb, 0x27, 0xd0, 0x7f, 0x74, 0x6a, 0xf9, 0xa0, 0x68, 0x68,
	0x71, 0x57, 0x7b, 0xfb, 0x1c, 0xb7, 0x7f, 0x26, 0x7b, 0xf9, 0x09, 0x1c, 0x94, 0x86, 0xa1, 0x1b,
	0x4d, 0x21, 0x2b, 0x0d, 0x6d, 0xa3, 0x9d, 0xaa, 0x59, 0x27, 0xab, 0xa8, 0x29, 0x4d, 0x7c, 0x97,
	0x99, 0x7d, 0xf5, 0x60, 0x74, 0x4b, 0xb8, 0xfe, 0x67, 0x93, 0xb4, 0x90, 0x53, 0xc8, 0xee, 0x1d,
	0x3b, 0x7d, 0xef, 0x8c, 0xf0, 0xb3, 0x0f, 0xc3, 0x87, 0xcd, 0xa2, 0x95, 0x20, 0x6d, 0xfa, 0x39,
	0x0c, 0xde, 0x24, 0x54, 0x14, 0x34, 0x1a, 0xf7, 0x02, 0x86, 0x3b, 0x9a, 0x30, 0xf7, 0x0a, 0x8e,
	0x77, 0xf8, 0xd5, 0x2f, 0xd1, 0x68, 0x1e, 0xc4, 0x53, 0x30, 0x47, 0x1a, 0xdb, 0x71, 0x13, 0x08,
	0x8d, 0xae, 0xb5, 0x9a, 0xaf, 0x91, 0x63, 0xf8, 0x99, 0x6a, 0xf9, 0x48, 0xc2, 0xa7, 0x70, 0xd8,
	0x1c, 0x5b, 0xb4, 0xe5, 0x19, 0xc0, 0xb6, 0x5e, 0x4c, 0x2e, 0xb2, 0xbf, 0x33, 0xbe, 0xfc, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0xbc, 0xe9, 0x33, 0x57, 0xeb, 0x02, 0x00, 0x00,
}
