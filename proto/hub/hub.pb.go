// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hub.proto

/*
Package hub is a generated protocol buffer package.

It is generated from these files:
	hub.proto

It has these top-level messages:
	PingRequest
	PingReply
	ListRequest
	ListReply
	StartTaskRequest
	StartTaskReply
	StopTaskRequest
	StopTaskReply
*/
package hub

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PingReply struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *PingReply) Reset()                    { *m = PingReply{} }
func (m *PingReply) String() string            { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()               {}
func (*PingReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PingReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type ListRequest struct {
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ListReply struct {
	Info map[string]*ListReply_ListValue `protobuf:"bytes,1,rep,name=info" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ListReply) Reset()                    { *m = ListReply{} }
func (m *ListReply) String() string            { return proto.CompactTextString(m) }
func (*ListReply) ProtoMessage()               {}
func (*ListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListReply) GetInfo() map[string]*ListReply_ListValue {
	if m != nil {
		return m.Info
	}
	return nil
}

type ListReply_ListValue struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *ListReply_ListValue) Reset()                    { *m = ListReply_ListValue{} }
func (m *ListReply_ListValue) String() string            { return proto.CompactTextString(m) }
func (*ListReply_ListValue) ProtoMessage()               {}
func (*ListReply_ListValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *ListReply_ListValue) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type StartTaskRequest struct {
	Miner    string `protobuf:"bytes,1,opt,name=miner" json:"miner,omitempty"`
	Registry string `protobuf:"bytes,2,opt,name=registry" json:"registry,omitempty"`
	Image    string `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
}

func (m *StartTaskRequest) Reset()                    { *m = StartTaskRequest{} }
func (m *StartTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*StartTaskRequest) ProtoMessage()               {}
func (*StartTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StartTaskRequest) GetMiner() string {
	if m != nil {
		return m.Miner
	}
	return ""
}

func (m *StartTaskRequest) GetRegistry() string {
	if m != nil {
		return m.Registry
	}
	return ""
}

func (m *StartTaskRequest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

type StartTaskReply struct {
	Id       string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Endpoint []string `protobuf:"bytes,2,rep,name=endpoint" json:"endpoint,omitempty"`
}

func (m *StartTaskReply) Reset()                    { *m = StartTaskReply{} }
func (m *StartTaskReply) String() string            { return proto.CompactTextString(m) }
func (*StartTaskReply) ProtoMessage()               {}
func (*StartTaskReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StartTaskReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StartTaskReply) GetEndpoint() []string {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

type StopTaskRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *StopTaskRequest) Reset()                    { *m = StopTaskRequest{} }
func (m *StopTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*StopTaskRequest) ProtoMessage()               {}
func (*StopTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *StopTaskRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type StopTaskReply struct {
}

func (m *StopTaskReply) Reset()                    { *m = StopTaskReply{} }
func (m *StopTaskReply) String() string            { return proto.CompactTextString(m) }
func (*StopTaskReply) ProtoMessage()               {}
func (*StopTaskReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*PingRequest)(nil), "hub.PingRequest")
	proto.RegisterType((*PingReply)(nil), "hub.PingReply")
	proto.RegisterType((*ListRequest)(nil), "hub.ListRequest")
	proto.RegisterType((*ListReply)(nil), "hub.ListReply")
	proto.RegisterType((*ListReply_ListValue)(nil), "hub.ListReply.ListValue")
	proto.RegisterType((*StartTaskRequest)(nil), "hub.StartTaskRequest")
	proto.RegisterType((*StartTaskReply)(nil), "hub.StartTaskReply")
	proto.RegisterType((*StopTaskRequest)(nil), "hub.StopTaskRequest")
	proto.RegisterType((*StopTaskReply)(nil), "hub.StopTaskReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hub service

type HubClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	StartTask(ctx context.Context, in *StartTaskRequest, opts ...grpc.CallOption) (*StartTaskReply, error)
	StopTask(ctx context.Context, in *StopTaskRequest, opts ...grpc.CallOption) (*StopTaskReply, error)
}

type hubClient struct {
	cc *grpc.ClientConn
}

func NewHubClient(cc *grpc.ClientConn) HubClient {
	return &hubClient{cc}
}

func (c *hubClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := grpc.Invoke(ctx, "/hub.Hub/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := grpc.Invoke(ctx, "/hub.Hub/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) StartTask(ctx context.Context, in *StartTaskRequest, opts ...grpc.CallOption) (*StartTaskReply, error) {
	out := new(StartTaskReply)
	err := grpc.Invoke(ctx, "/hub.Hub/StartTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubClient) StopTask(ctx context.Context, in *StopTaskRequest, opts ...grpc.CallOption) (*StopTaskReply, error) {
	out := new(StopTaskReply)
	err := grpc.Invoke(ctx, "/hub.Hub/StopTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Hub service

type HubServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	List(context.Context, *ListRequest) (*ListReply, error)
	StartTask(context.Context, *StartTaskRequest) (*StartTaskReply, error)
	StopTask(context.Context, *StopTaskRequest) (*StopTaskReply, error)
}

func RegisterHubServer(s *grpc.Server, srv HubServer) {
	s.RegisterService(&_Hub_serviceDesc, srv)
}

func _Hub_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hub.Hub/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hub.Hub/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_StartTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).StartTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hub.Hub/StartTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).StartTask(ctx, req.(*StartTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hub_StopTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServer).StopTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hub.Hub/StopTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServer).StopTask(ctx, req.(*StopTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hub.Hub",
	HandlerType: (*HubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Hub_Ping_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Hub_List_Handler,
		},
		{
			MethodName: "StartTask",
			Handler:    _Hub_StartTask_Handler,
		},
		{
			MethodName: "StopTask",
			Handler:    _Hub_StopTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hub.proto",
}

func init() { proto.RegisterFile("hub.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4d, 0x4b, 0xe3, 0x40,
	0x18, 0xc7, 0x9b, 0xa4, 0x2d, 0x9d, 0xa7, 0xf4, 0x85, 0xd9, 0xee, 0x12, 0x72, 0xea, 0x4e, 0x2f,
	0x65, 0x59, 0x72, 0xa8, 0x20, 0x2a, 0x5e, 0x05, 0x05, 0x0f, 0x9a, 0x8a, 0x07, 0x6f, 0x09, 0x9d,
	0xb6, 0x43, 0xd3, 0x24, 0x66, 0x26, 0x42, 0x3e, 0x96, 0xdf, 0xc4, 0x8f, 0x24, 0xf3, 0xd2, 0x31,
	0x06, 0x6f, 0xf9, 0x3f, 0xf3, 0xff, 0x3d, 0xaf, 0x01, 0xb4, 0xaf, 0x92, 0xb0, 0x28, 0x73, 0x91,
	0x63, 0x6f, 0x5f, 0x25, 0x64, 0x04, 0xc3, 0x07, 0x96, 0xed, 0x22, 0xfa, 0x5a, 0x51, 0x2e, 0xc8,
	0x02, 0x90, 0x96, 0x45, 0x5a, 0xe3, 0x3f, 0xd0, 0xe7, 0x22, 0x16, 0x15, 0xf7, 0x9d, 0xb9, 0xb3,
	0x44, 0x91, 0x51, 0x92, 0xb9, 0x67, 0x5c, 0x9c, 0x98, 0x77, 0x07, 0x90, 0xd6, 0x12, 0xfa, 0x0f,
	0x5d, 0x96, 0x6d, 0x73, 0xdf, 0x99, 0x7b, 0xcb, 0xe1, 0xca, 0x0f, 0x65, 0x3d, 0xfb, 0x1a, 0xde,
	0x65, 0xdb, 0xfc, 0x26, 0x13, 0x65, 0x1d, 0x29, 0x57, 0xb0, 0xd0, 0xe8, 0x73, 0x9c, 0x56, 0x54,
	0xd6, 0x7b, 0x93, 0x1f, 0x5c, 0xc1, 0x28, 0x32, 0x2a, 0x78, 0x04, 0x64, 0x39, 0x3c, 0x05, 0xef,
	0x40, 0x6b, 0xd3, 0x91, 0xfc, 0xc4, 0x21, 0xf4, 0x94, 0xd1, 0x77, 0xe7, 0xce, 0x0f, 0x25, 0x6d,
	0xfe, 0x48, 0xdb, 0xae, 0xdc, 0x0b, 0x87, 0xbc, 0xc0, 0x74, 0x2d, 0xe2, 0x52, 0x3c, 0xc5, 0xfc,
	0x60, 0xe6, 0xc0, 0x33, 0xe8, 0x1d, 0x59, 0x46, 0x4b, 0x93, 0x5b, 0x0b, 0x1c, 0xc0, 0xa0, 0xa4,
	0x3b, 0xc6, 0x45, 0x59, 0xab, 0x02, 0x28, 0xb2, 0x5a, 0x12, 0xec, 0x18, 0xef, 0xa8, 0xef, 0x69,
	0x42, 0x09, 0x72, 0x0d, 0xe3, 0x46, 0x6e, 0xb9, 0x93, 0x31, 0xb8, 0x6c, 0x63, 0xd2, 0xba, 0x6c,
	0x23, 0x73, 0xd2, 0x6c, 0x53, 0xe4, 0x2c, 0x13, 0xbe, 0xab, 0x46, 0xb5, 0x9a, 0xfc, 0x85, 0xc9,
	0x5a, 0xe4, 0x45, 0xb3, 0xb1, 0x16, 0x4e, 0x26, 0x30, 0xfa, 0xb2, 0x14, 0x69, 0xbd, 0xfa, 0x70,
	0xc0, 0xbb, 0xad, 0x12, 0xfc, 0x0f, 0xba, 0xf2, 0x7a, 0x78, 0xaa, 0x56, 0xd0, 0xb8, 0x6b, 0x30,
	0x6e, 0x44, 0x8a, 0xb4, 0x26, 0x1d, 0xe9, 0x95, 0x9b, 0x31, 0xde, 0xc6, 0x3d, 0x8d, 0xd7, 0x2e,
	0x90, 0x74, 0xf0, 0x25, 0x20, 0x3b, 0x11, 0xfe, 0xad, 0x9e, 0xdb, 0xdb, 0x0b, 0x7e, 0xb5, 0xc3,
	0x1a, 0x3d, 0x87, 0xc1, 0xa9, 0x57, 0x3c, 0x33, 0x96, 0x6f, 0xd3, 0x05, 0xb8, 0x15, 0x55, 0x5c,
	0xd2, 0x57, 0xff, 0xe8, 0xd9, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0c, 0xa5, 0x5e, 0x89, 0xb0,
	0x02, 0x00, 0x00,
}
